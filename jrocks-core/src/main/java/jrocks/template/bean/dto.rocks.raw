@import jrocks.model.ClassInfo
@import jrocks.model.FieldClassInfo
@import jrocks.shell.generator.dto.DtoParameter
@import java.time.LocalDateTime
@import java.time.format.DateTimeFormatter

@option discardLogicWhitespace=true

@args(ClassInfo bean, DtoParameter param)

package @bean.packageName();

import javax.annotation.Generated;
@for (String name : bean.fieldCanonicalNames()) {
import @name;
}
@if (!param.getMandatoryFields().isEmpty()|| bean.hasRequiredFields()) {
import javax.validation.constraints.NotNull;
}

/**
 * @param.suffix() for the @bean.simpleName() bean.
 */
@@Generated(value = "jrocks", date = "@LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)")
public class @param.applySuffix(bean.simpleName()) {

@for (FieldClassInfo fieldInfo : bean.getFields()) {
  @if (param.getMandatoryFields().contains(fieldInfo.fieldName())) {
  @@NotNull
  }
  private @fieldInfo.simpleName() @fieldInfo.fieldName();

}
@if(param.withFactoryMethod()) {
  public static @param.applySuffix(bean.simpleName()) from(@bean.simpleName() from) {
    return new @param.applySuffix(bean.simpleName())()
@for ((ForIterator i, FieldClassInfo fieldInfo) : bean.getFields()) {
        @String.format(".%s(from.%s())", fieldInfo.setter(), fieldInfo.getter())@if(i.last()) {;}
}
  }
}

@if(param.withFactoryMethod()) {
  public static @bean.simpleName() to(@param.applySuffix(bean.simpleName()) to) {
    return new @bean.simpleName()()
@for ((ForIterator i, FieldClassInfo fieldInfo) : bean.getFields()) {
        @String.format(".%s(to.%s())", fieldInfo.setter(), fieldInfo.getter())@if(i.last()) {;}
}
  }
}
@for (FieldClassInfo fieldInfo : bean.getFields()) {

  public @param.applySuffix(bean.simpleName()) @fieldInfo.setter()(@fieldInfo.simpleName() @fieldInfo.fieldName()) {
    @String.format("this.%s = %s;", fieldInfo.fieldName(), fieldInfo.fieldName());
    return this;
  }

  public @fieldInfo.simpleName() @fieldInfo.getter()() {
    return @fieldInfo.fieldName();
  }
}
}