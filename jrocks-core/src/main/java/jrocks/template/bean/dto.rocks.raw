@import jrocks.api.ClassInfoApi
@import jrocks.api.FieldClassInfoApi
@import jrocks.model.MapperData

@option discardLogicWhitespace=true

@args(ClassInfoApi bean, MapperData mapper)

package @bean.packageName();

@for (String name : bean.fieldCanonicalNames()) {
import @name;
}

/**
 * @mapper.suffix() for the @mapper.applySuffix(bean.simpleName()) bean.
 */
public class @mapper.applySuffix(bean.simpleName()) {

@for (FieldClassInfoApi field : bean.getFields()) {
  private @field.simpleName() @field.fieldName();
}

@if(mapper.withFactoryMethod()) {
  public static @mapper.applySuffix(bean.simpleName()) from(@bean.simpleName() from) {
    return new @mapper.applySuffix(bean.simpleName())()
@for ((ForIterator i, FieldClassInfoApi field) : bean.getFields()) {
        @String.format(".%s(from.%s())", field.setter(), field.getter())@if(i.last()) {;}
}
  }
}
@for (FieldClassInfoApi field : bean.getFields()) {

  public @mapper.applySuffix(bean.simpleName()) @field.setter()(@field.simpleName() @field.fieldName()) {
    @String.format("this.%s = %s;", field.fieldName(), field.fieldName());
    return this;
  }

  public @field.simpleName() @field.getter()() {
    return @field.fieldName();
  }
}
}