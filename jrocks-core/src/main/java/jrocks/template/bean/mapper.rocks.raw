@import jrocks.model.ClassInfo
@import jrocks.model.FieldClassInfo
@import jrocks.shell.generator.dto.DtoParameter
@import java.time.LocalDateTime
@import java.time.format.DateTimeFormatter

@option discardLogicWhitespace=true

@args(ClassInfo bean, DtoParameter parameter)

package @bean.packageName();

import javax.annotation.Generated;
@for (String name : bean.fieldCanonicalNames()) {
import @name;
}
import @String.format("%s.%s%s", bean.packageName(), bean.simpleName(), parameter.suffix());

/**
 * Mapper for the @bean.simpleName().
 */
@@Generated(value = "jrocks", date = "@LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)")
public class @bean.simpleName()@parameter.suffix()Mapper {

  public @bean.simpleName()@parameter.suffix() from(@bean.simpleName() from) {
    return new @bean.simpleName()@parameter.suffix()()
@for ((ForIterator i, FieldClassInfo fieldInfo) : bean.getFields()) {
        @String.format(".%s(from.%s())", fieldInfo.setter(), fieldInfo.getter())@if(i.last()) {;}
}
  }

  public @bean.simpleName() to(@bean.simpleName()@parameter.suffix() to) {
    return new @bean.simpleName()()
@for ((ForIterator i, FieldClassInfo fieldInfo) : bean.getFields()) {
        @String.format(".%s(to.%s())", fieldInfo.setter(), fieldInfo.getter())@if(i.last()) {;}
}
  }
}