@import jrocks.api.ClassInfoApi
@import jrocks.api.FieldClassInfoApi
@import jrocks.template.annotations.BuilderProperty
@import jrocks.api.ClassInfoParameterApi
@import java.time.LocalDateTime
@import java.time.format.DateTimeFormatter

@option discardLogicWhitespace=true

@args(ClassInfoApi bean, ClassInfoParameterApi param)

package @bean.packageName();

import javax.annotation.Generated;
@for (String name : bean.requiredFieldCanonicalNames()) {
import @name;
}
import java.util.Objects;

/**
 * Builder for the @bean.simpleName() bean.
 */
@@Generated(value = "jrocks", date = "@LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)")
public class @bean.simpleName()Builder {

  private @bean.simpleName() @bean.propertyName() = new @bean.simpleName()();

  public @bean.simpleName() build() {
@for (FieldClassInfoApi p : bean.getFields()) {
  @if(p.isRequired() || param.getMandatoryFields().contains(p.fieldName())) {
    Objects.requireNonNull(@String.format("%s.%s()", bean.propertyName(), p.getter()), "@String.format("%s is required!", p.fieldNameCapitalized())");
  }
}
    return @bean.propertyName();
  }

@for (FieldClassInfoApi fieldInfo : bean.getFields()) {
  @if(fieldInfo.isRequired() || param.toInclude(fieldInfo.fieldName())) {
  public @bean.simpleName()Builder @fieldInfo.setter()(@fieldInfo.simpleName() @fieldInfo.fieldName()) {
    @String.format("%s.set%s(%s)", bean.propertyName(), fieldInfo.fieldNameCapitalized(), fieldInfo.fieldName());
    return this;
  }

  }
}
}