@import jrocks.plugin.api.ClassApi
@import jrocks.plugin.api.FieldApi
@import jrocks.plugin.api.ClassParameterApi
@import java.time.LocalDateTime
@import java.time.format.DateTimeFormatter
@option discardLogicWhitespace=true
@args(ClassApi bean, ClassParameterApi param)

import {Component, Inject, OnInit} from '@@angular/core';
import {MAT_DIALOG_DATA, MatDialogRef} from "@@angular/material";
import {FormBuilder, FormGroup, Validators} from "@@angular/forms";
import {@bean.simpleName()} from "../../../model/@bean.resourceName()";
import {@bean.simpleName()Service} from "../../../service/@String.format("%s.service", bean.resourceName())";

@@Component({
  selector: 'app-edit',
  templateUrl: './edit-@bean.resourceName()-dialog.component.html',
  styleUrls: ['./edit-@bean.resourceName()-dialog.component.scss']
})
export class Edit@bean.simpleName()DialogComponent implements OnInit {

  form: FormGroup;

  constructor(
    private @bean.propertyName()Service: @bean.simpleName()Service,
    private fb: FormBuilder,
    private dialogRef: MatDialogRef<Edit@bean.simpleName()DialogComponent>,
    @@Inject(MAT_DIALOG_DATA) { @bean.fieldNamesAsCsv() }: @bean.simpleName()) {

    this.form = fb.group({
@for (FieldApi f : bean.fields()) {
    @if(f.isRequired()) {
      @f.fieldName(): [@f.fieldName(), Validators.required],
    } else {
      @f.fieldName(): [@f.fieldName(), ],
    }
}
    });

  }

  ngOnInit() {
  }

  save() {
    if (this.form.valid) {
      this.@bean.propertyName()Service.save@bean.simpleName()(this.form.value)
        .subscribe(saved => console.log(saved));
      this.dialogRef.close(this.form.value);
    }
  }

  close() {
    this.dialogRef.close();
  }

}
