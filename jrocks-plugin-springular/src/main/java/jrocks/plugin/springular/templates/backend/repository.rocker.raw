@import jrocks.plugin.api.ClassApi
@import jrocks.plugin.api.FieldApi
@import jrocks.plugin.api.ClassParameterApi
@import java.time.LocalDateTime
@import java.time.format.DateTimeFormatter

@option discardLogicWhitespace=true

@args(ClassApi bean, ClassParameterApi param)

package @bean.packageName();

import jrocks.springular.example.model.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.core.annotation.RestResource;

@@RestResource(path = "@bean.resourceName()")
public interface @bean.simpleName()Repository extends JpaRepository<@bean.simpleName(), Long> {

  @@RestResource(path = "filter")
  @@Query("SELECT e from @bean.simpleName() e WHERE 1 = 0 " +
@for (FieldApi f : bean.fields()) {
  @if(f.name().equals("java.lang.String")) {
      "OR UPPER(@String.format("e.%s", f.fieldName())) like UPPER(:@f.fieldName()) " +
  }
}
  "")
  Page<Example> filter(
@for (FieldApi f : bean.fields()) {
  @if(f.name().equals("java.lang.String")) {
      @@Param("@f.fieldName()") String @f.fieldName(),
  }
}
      @@Param("pageable") Pageable pageable);
}
